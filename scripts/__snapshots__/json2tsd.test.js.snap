// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getClassFunction should return corresponding class function 1`] = `
"
/**
  * Disposing canvas event handlers
  * @this GitGraph
  **/
dispose(): void;

/**
  * Create new branch
  * @param options Branch name | Options of Branch
  * @see Branch
  * @this GitGraph
  * @return New branch
  **/
branch(options: string|GitGraph.BranchOptions): GitGraph.Branch;

/**
  * Create new orphan branch
  * @param options Branch name | Options of Branch
  * @see Branch
  * @this GitGraph
  * @return New branch
  **/
orphanBranch(options: string|GitGraph.BranchOptions): GitGraph.Branch;

/**
  * Commit on HEAD
  * @param options Message | Options of commit
  * @see Commit
  * @this GitGraph
  * @return this Return the main object so we can chain
  **/
commit(options: string|GitGraph.BranchCommitOptions): GitGraph;

/**
  * Tag the HEAD
  * @param options Options of tag
  * @see Tag
  * @this GitGraph
  * @return this Return the main object so we can chain
  **/
tag(options: GitGraph.TagOptions): GitGraph;

/**
  * Create a new template
  * @param options The template name, or the template options
  * @see Template
  * @this GitGraph
  * @return 
  **/
newTemplate(options: string|GitGraph.TemplateOptions): GitGraph.Template;

/**
  * Render the canvas
  * @this GitGraph
  **/
render(): void;

/**
  * Hover event on commit dot
  * @param event Mouse event
  * @param callbackFn A callback function that will be called for each commit
  * @this GitGraph
  **/
applyCommits(event: MouseEvent,callbackFn: GitGraph.CommitCallback): void;

/**
  * Hover event on commit dot
  * @param event Mouse event
  * @this GitGraph
  **/
hover(event: MouseEvent): void;

/**
  * Click event on commit dot
  * @param event Mouse event
  * @this GitGraph
  **/
click(event: MouseEvent): void;
"
`;

exports[`getObject should deal with nested objects 1`] = `
"color?: string;
dot?: {
          color?: string;
size?: number;
        };
"
`;

exports[`getObject should return a pretty format object 1`] = `
"color?: string;
size?: number;
offset?: number;"
`;

exports[`getOptions should deal with nested object format 1`] = `
"
        interface TemplateOptions {
          colors?: string[];
arrow?: {
color?: string;
size?: number;
offset?: number;};
branch?: {
color?: string;
lineWidth?: number;
mergeStyle?: string;
spacingX?: number;
spacingY?: number;};
commit?: {
spacingX?: number;
spacingY?: number;
widthExtension?: number;
color?: string;
dot?: {
          color?: string;
size?: number;
strokeWidth?: number;
strokeColor?: string;
        };



message?: {
          color?: string;
display?: boolean;
displayAuthor?: boolean;
displayBranch?: boolean;
displayHash?: boolean;
font?: string;
        };





shouldDisplayTooltipsInCompactMode?: boolean;
tooltipHTMLFormatter?: GitGraph.CommitFormatter;};
}
      "
`;

exports[`getOptions should return parsed options from doc 1`] = `
"
        interface GitGraphOptions {
          elementId?: string;
template?: GitGraph.Template|string|any;
author?: string;
mode?: string;
canvas?: HTMLElement;
orientation?: string;
reverseArrow?: boolean;
initCommitOffsetX?: number;
initCommitOffsetY?: number;
tooltipContainer?: HTMLElement;
}
      "
`;

exports[`getProperties should deal with \`object\` type 1`] = `
Array [
  "color?: string;",
  "author?: string;",
  "date?: string;",
  "detail?: string;",
  "sha1?: string;",
  "parentCommit?: GitGraph.Commit;",
  "type?: string;",
  "tag?: string;",
  "tagColor?: string;",
  "tagFont?: string;",
  "displayTagBox?: string;",
  "dotColor?: string;",
  "dotSize?: number;",
  "dotStrokeWidth?: number;",
  "dotStrokeColor?: string;",
  "message?: string;",
  "messageColor?: string;",
  "messageFont?: string;",
  "messageDisplay?: boolean;",
  "messageAuthorDisplay?: boolean;",
  "messageBranchDisplay?: boolean;",
  "messageHashDisplay?: boolean;",
  "labelColor?: string;",
  "labelFont?: string;",
  "tooltipDisplay?: boolean;",
  "onClick?: GitGraph.CommitCallback;",
  "representedObject?: any;",
]
`;

exports[`parseComment should remove all dot notation params 1`] = `
"/**
  * GitGraph
  * @constructor
  * @param options GitGraph options
  * @this GitGraph
  **/"
`;
